{"ast":null,"code":"import _regeneratorRuntime from \"d:\\\\chat\\\\test\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"d:\\\\chat\\\\test\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"d:\\\\chat\\\\test\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"d:\\\\chat\\\\test\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"d:\\\\chat\\\\test\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"d:\\\\chat\\\\test\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"d:\\\\chat\\\\test\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"d:\\\\chat\\\\test\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"d:\\\\chat\\\\test\\\\React App\\\\src\\\\pages\\\\home\\\\conversation\\\\Conversation.js\";\nimport React, { Component } from 'react';\nimport ChatHttpServer from '../../../utils/ChatHttpServer.js';\nimport ChatSocketServer from '../../../utils/ChatSocketServer.js';\nimport './Conversation.css';\n\nvar Conversation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Conversation, _Component);\n\n  function Conversation(props) {\n    var _this;\n\n    _classCallCheck(this, Conversation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Conversation).call(this, props));\n\n    _this.receiveSocketMessages = function (socketResponse) {\n      var selectedUser = _this.state.selectedUser;\n\n      if (selectedUser !== null && selectedUser.id === socketResponse.fromUserId) {\n        _this.setState({\n          conversations: [].concat(_toConsumableArray(_this.state.conversations), [socketResponse])\n        });\n\n        console.log(selectedUser);\n\n        _this.scrollMessageContainer();\n      }\n    };\n\n    _this.getMessages =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$props, userId, newSelectedUser, messageResponse;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _this$props = _this.props, userId = _this$props.userId, newSelectedUser = _this$props.newSelectedUser;\n              _context.next = 4;\n              return ChatHttpServer.getMessages(userId, newSelectedUser.id);\n\n            case 4:\n              messageResponse = _context.sent;\n\n              if (!messageResponse.error) {\n                _this.setState({\n                  conversations: messageResponse.messages\n                });\n\n                _this.scrollMessageContainer();\n              } else {\n                alert('Unable to fetch messages');\n              }\n\n              _this.setState({\n                messageLoading: false\n              });\n\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n\n              _this.setState({\n                messageLoading: false\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    _this.sendMessage = function (event) {\n      if (event.key === 'Enter') {\n        var message = event.target.value;\n        var _this$props2 = _this.props,\n            userId = _this$props2.userId,\n            newSelectedUser = _this$props2.newSelectedUser;\n\n        if (message === '' || message === undefined || message === null) {\n          alert(\"Message can't be empty.\");\n        } else if (userId === '') {\n          _this.router.navigate(['/']);\n        } else if (newSelectedUser === undefined) {\n          alert(\"Select a user to chat.\");\n        } else {\n          _this.sendAndUpdateMessages({\n            fromUserId: userId,\n            message: message.trim(),\n            seen: false,\n            toUserId: newSelectedUser.id\n          });\n\n          event.target.value = '';\n        }\n      }\n    };\n\n    _this.seen = function () {\n      if (_this.state.conversations === null || _this.state.conversations === '' || _this.state.conversations === undefined || _this.state.conversations.length === 0) {\n        console.log('null data');\n      } else {\n        if (_this.state.conversations[_this.state.conversations.length - 1].fromUserId !== _this.props.userId) {\n          ChatSocketServer.SeenMesseage();\n        }\n\n        _this.getMessages();\n      }\n    };\n\n    _this.state = {\n      messageLoading: true,\n      conversations: [],\n      selectedUser: null\n    };\n    _this.messageContainer = React.createRef();\n    return _this;\n  }\n\n  _createClass(Conversation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // ChatSocketServer.receiveMessage();\n      ChatSocketServer.eventEmitter.on('add-message-response', this.receiveSocketMessages); // window.addEventListener('focus', this.nofSeen)\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ChatSocketServer.eventEmitter.removeListener('add-message-response', this.receiveSocketMessages); // window.removeEventListener('focus',this.getMessages);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.newSelectedUser === null || this.props.newSelectedUser.id !== prevProps.newSelectedUser.id) {\n        this.getMessages();\n      }\n    }\n  }, {\n    key: \"sendAndUpdateMessages\",\n    value: function sendAndUpdateMessages(message) {\n      try {\n        ChatSocketServer.sendMessage(message);\n        this.setState({\n          conversations: [].concat(_toConsumableArray(this.state.conversations), [message])\n        });\n        this.scrollMessageContainer();\n      } catch (error) {\n        alert(\"Can't send your message\");\n      }\n    }\n  }, {\n    key: \"scrollMessageContainer\",\n    value: function scrollMessageContainer() {\n      var _this2 = this;\n\n      if (this.messageContainer.current !== null) {\n        try {\n          setTimeout(function () {\n            _this2.messageContainer.current.scrollTop = _this2.messageContainer.current.scrollHeight;\n          }, 20);\n        } catch (error) {\n          console.warn(error);\n        }\n      }\n    }\n  }, {\n    key: \"alignMessages\",\n    value: function alignMessages(toUserId) {\n      var userId = this.props.userId;\n      return userId !== toUserId;\n    } // *********************************\n\n  }, {\n    key: \"getMessageUI\",\n    value: function getMessageUI() {\n      var _this3 = this;\n\n      return React.createElement(\"ul\", {\n        ref: this.messageContainer,\n        className: \"message-thread\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, this.state.conversations.map(function (conversation, index) {\n        return React.createElement(\"li\", {\n          className: \"\".concat(_this3.alignMessages(conversation.toUserId) ? 'align-right' : ''),\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"mssbox\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, conversation.message), React.createElement(\"div\", {\n          className: _this3.state.conversations.indexOf(conversation) === _this3.state.conversations.length - 1 ? 'last' : 'not-last',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: conversation.seen ? 'seen' : 'unread',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, \"seen\")));\n      }));\n    }\n  }, {\n    key: \"getInitiateConversationUI\",\n    value: function getInitiateConversationUI() {\n      if (this.props.newSelectedUser !== null) {\n        return React.createElement(\"div\", {\n          className: \"message-thread start-chatting-banner\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"heading\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, \"You haven 't chatted with \", this.props.newSelectedUser.username, \" in a while,\", React.createElement(\"span\", {\n          className: \"sub-heading\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, \" Say Hi.\")));\n      }\n    } //seen\n\n  }, {\n    key: \"nofSeen\",\n    value: function nofSeen() {\n      if (this.state.conversations[this.state.conversations.length - 1].seen !== true) {\n        this.getMessages();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          messageLoading = _this$state.messageLoading,\n          selectedUser = _this$state.selectedUser;\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"message-overlay \".concat(!messageLoading ? 'visibility-hidden' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \" \", selectedUser !== null && selectedUser.username ? 'Loading Messages' : ' Select a User to chat.')), React.createElement(\"div\", {\n        className: \"message-wrapper \".concat(messageLoading ? 'visibility-hidden' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"message-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"opposite-user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \"Chatting with \", this.props.newSelectedUser !== null ? this.props.newSelectedUser.username : '----'), React.createElement(\"div\", {\n        className: \"text-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, this.state.conversations.length > 0 ? this.getMessageUI() : this.getInitiateConversationUI())), React.createElement(\"div\", {\n        className: \"message-typer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        className: \"message form-control\",\n        placeholder: \"Type and hit Enter\",\n        onKeyPress: this.sendMessage,\n        onClick: this.seen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      })))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (state.selectedUser === null || state.selectedUser.id !== props.newSelectedUser.id) {\n        return {\n          selectedUser: props.newSelectedUser\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Conversation;\n}(Component);\n\nexport default Conversation;","map":{"version":3,"sources":["d:\\chat\\test\\React App\\src\\pages\\home\\conversation\\Conversation.js"],"names":["React","Component","ChatHttpServer","ChatSocketServer","Conversation","props","receiveSocketMessages","socketResponse","selectedUser","state","id","fromUserId","setState","conversations","console","log","scrollMessageContainer","getMessages","userId","newSelectedUser","messageResponse","error","messages","alert","messageLoading","sendMessage","event","key","message","target","value","undefined","router","navigate","sendAndUpdateMessages","trim","seen","toUserId","length","SeenMesseage","messageContainer","createRef","eventEmitter","on","removeListener","prevProps","current","setTimeout","scrollTop","scrollHeight","warn","map","conversation","index","alignMessages","indexOf","username","getMessageUI","getInitiateConversationUI"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport ChatHttpServer from '../../../utils/ChatHttpServer.js';\r\nimport ChatSocketServer from '../../../utils/ChatSocketServer.js';\r\n\r\nimport './Conversation.css';\r\n\r\nclass Conversation extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      messageLoading: true,\r\n      conversations: [],\r\n      selectedUser: null\r\n    }\r\n    this.messageContainer = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    // ChatSocketServer.receiveMessage();\r\n    ChatSocketServer.eventEmitter.on('add-message-response', this.receiveSocketMessages);\r\n    // window.addEventListener('focus', this.nofSeen)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    ChatSocketServer.eventEmitter.removeListener('add-message-response', this.receiveSocketMessages);\r\n    // window.removeEventListener('focus',this.getMessages);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.newSelectedUser === null || (this.props.newSelectedUser.id !== prevProps.newSelectedUser.id)) {\r\n      this.getMessages();\r\n    }\r\n\r\n  }\r\n\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (state.selectedUser === null || state.selectedUser.id !== props.newSelectedUser.id) {\r\n      return {\r\n        selectedUser: props.newSelectedUser\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  receiveSocketMessages = (socketResponse) => {\r\n    const { selectedUser } = this.state;\r\n    if (selectedUser !== null && selectedUser.id === socketResponse.fromUserId) {\r\n      this.setState({\r\n        conversations: [...this.state.conversations, socketResponse]\r\n      });\r\n      console.log(selectedUser)\r\n      this.scrollMessageContainer();\r\n    }\r\n  }\r\n\r\n  getMessages = async () => {\r\n    try {\r\n      const { userId, newSelectedUser } = this.props;\r\n      const messageResponse = await ChatHttpServer.getMessages(userId, newSelectedUser.id);\r\n      if (!messageResponse.error) {\r\n        this.setState({\r\n          conversations: messageResponse.messages,\r\n        });\r\n        this.scrollMessageContainer();\r\n      } else {\r\n        alert('Unable to fetch messages');\r\n      }\r\n      this.setState({\r\n        messageLoading: false\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        messageLoading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  sendMessage = (event) => {\r\n    if (event.key === 'Enter') {\r\n      const message = event.target.value;\r\n      const { userId, newSelectedUser } = this.props;\r\n      if (message === '' || message === undefined || message === null) {\r\n        alert(`Message can't be empty.`);\r\n      } else if (userId === '') {\r\n        this.router.navigate(['/']);\r\n      } else if (newSelectedUser === undefined) {\r\n        alert(`Select a user to chat.`);\r\n      } else {\r\n        this.sendAndUpdateMessages({\r\n          fromUserId: userId,\r\n          message: (message).trim(),\r\n          seen: false,\r\n          toUserId: newSelectedUser.id,\r\n        });\r\n        event.target.value = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  sendAndUpdateMessages(message) {\r\n    try {\r\n      ChatSocketServer.sendMessage(message);\r\n      this.setState({\r\n        conversations: [...this.state.conversations, message]\r\n      });\r\n      this.scrollMessageContainer();\r\n    } catch (error) {\r\n      alert(`Can't send your message`);\r\n    }\r\n  }\r\n\r\n  scrollMessageContainer() {\r\n    if (this.messageContainer.current !== null) {\r\n      try {\r\n        setTimeout(() => {\r\n          this.messageContainer.current.scrollTop = this.messageContainer.current.scrollHeight;\r\n        }, 20);\r\n      } catch (error) {\r\n        console.warn(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  alignMessages(toUserId) {\r\n    const { userId } = this.props;\r\n    return userId !== toUserId;\r\n  }\r\n  // *********************************\r\n  getMessageUI() {\r\n    return (\r\n      <ul ref={this.messageContainer} className=\"message-thread\">\r\n        {\r\n          this.state.conversations.map((conversation, index) =>\r\n            <li className={`${this.alignMessages(conversation.toUserId) ? 'align-right' : ''}`} key={index}>\r\n              <div className='mssbox'>\r\n                {conversation.message}\r\n              </div>\r\n              <div className={this.state.conversations.indexOf(conversation) === (this.state.conversations.length - 1) ? 'last' : 'not-last'}>\r\n                <div className={(conversation.seen) ? 'seen' : 'unread'}>seen</div>\r\n              </div>\r\n            </li>\r\n          )\r\n        }\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  getInitiateConversationUI() {\r\n    if (this.props.newSelectedUser !== null) {\r\n      return (\r\n        <div className=\"message-thread start-chatting-banner\">\r\n          <p className=\"heading\">\r\n            You haven 't chatted with {this.props.newSelectedUser.username} in a while,\r\n            <span className=\"sub-heading\"> Say Hi.</span>\r\n          </p>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  //seen\r\n  seen = () => {\r\n    if (this.state.conversations === null || this.state.conversations === '' || this.state.conversations === undefined || this.state.conversations.length === 0) {\r\n      console.log('null data')\r\n    } else {\r\n      if (this.state.conversations[this.state.conversations.length - 1].fromUserId !== this.props.userId) {\r\n        ChatSocketServer.SeenMesseage()\r\n      }\r\n      this.getMessages();\r\n    }\r\n  }\r\n\r\n  nofSeen(){\r\n    if(this.state.conversations[this.state.conversations.length - 1].seen !==true){\r\n        this.getMessages()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { messageLoading, selectedUser } = this.state;\r\n    return (\r\n      <>\r\n        <div className={`message-overlay ${!messageLoading ? 'visibility-hidden' : ''}`} >\r\n          <h3> {selectedUser !== null && selectedUser.username ? 'Loading Messages' : ' Select a User to chat.'}</h3>\r\n        </div>\r\n        <div className={`message-wrapper ${messageLoading ? 'visibility-hidden' : ''}`}>\r\n          <div className=\"message-container\">\r\n            <div className=\"opposite-user\">\r\n              Chatting with {this.props.newSelectedUser !== null ? this.props.newSelectedUser.username : '----'}\r\n            </div>\r\n            <div className=\"text-message\">              \r\n            {this.state.conversations.length > 0 ? this.getMessageUI() : this.getInitiateConversationUI()}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"message-typer\">\r\n            <form>\r\n              <input type=\"text\" className=\"message form-control\" placeholder=\"Type and hit Enter\" onKeyPress={this.sendMessage} onClick={this.seen}>\r\n              </input>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Conversation;\r\n"]},"metadata":{},"sourceType":"module"}