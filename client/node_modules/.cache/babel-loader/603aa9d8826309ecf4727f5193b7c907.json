{"ast":null,"code":"import _classCallCheck from \"D:\\\\my_project\\\\ChatApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\my_project\\\\ChatApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport * as io from 'socket.io-client';\n\nvar events = require('events');\n\nvar ChatSocketServer =\n/*#__PURE__*/\nfunction () {\n  function ChatSocketServer() {\n    _classCallCheck(this, ChatSocketServer);\n\n    this.socket = null;\n    this.eventEmitter = new events.EventEmitter();\n  }\n\n  _createClass(ChatSocketServer, [{\n    key: \"establishSocketConnection\",\n    // Connecting to Socket Server\n    value: function establishSocketConnection(userId) {\n      try {\n        this.socket = io(\"http://localhost:4000\", {\n          query: \"userId=\".concat(userId)\n        });\n      } catch (error) {\n        alert(\"Something went wrong; Can't connect to socket server\");\n      }\n    }\n  }, {\n    key: \"getChatList\",\n    value: function getChatList(userId) {\n      var _this = this;\n\n      this.socket.emit('chat-list', {\n        userId: userId\n      });\n      this.socket.on('chat-list-response', function (data) {\n        _this.eventEmitter.emit('chat-list-response', data);\n      });\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(message) {\n      this.socket.emit('add-message', message);\n    }\n  }, {\n    key: \"receiveMessage\",\n    value: function receiveMessage() {\n      var _this2 = this;\n\n      this.socket.on('add-message-response', function (data) {\n        _this2.eventEmitter.emit('add-message-response', data);\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout(userId) {\n      var _this3 = this;\n\n      this.socket.emit('logout', userId);\n      this.socket.on('logout-response', function (data) {\n        _this3.eventEmitter.emit('logout-response', data);\n      });\n    } //seen\n\n  }, {\n    key: \"SeenMesseage\",\n    value: function SeenMesseage() {\n      this.socket.emit('seen-meesage');\n    } //\n\n  }]);\n\n  return ChatSocketServer;\n}();\n\nexport default new ChatSocketServer();","map":{"version":3,"sources":["D:\\my_project\\ChatApp\\client\\src\\utils\\ChatSocketServer.js"],"names":["io","events","require","ChatSocketServer","socket","eventEmitter","EventEmitter","userId","query","error","alert","emit","on","data","message"],"mappings":";;AAAA,OAAO,KAAKA,EAAZ,MAAoB,kBAApB;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;IAGMC,gB;;;;;;SAEFC,M,GAAS,I;SACTC,Y,GAAe,IAAIJ,MAAM,CAACK,YAAX,E;;;;;AAEf;8CAC0BC,M,EAAQ;AAC9B,UAAI;AACA,aAAKH,MAAL,GAAcJ,EAAE,0BAA0B;AACtCQ,UAAAA,KAAK,mBAAYD,MAAZ;AADiC,SAA1B,CAAhB;AAGH,OAJD,CAIE,OAAOE,KAAP,EAAc;AACZC,QAAAA,KAAK,wDAAL;AACH;AACJ;;;gCAEWH,M,EAAQ;AAAA;;AAChB,WAAKH,MAAL,CAAYO,IAAZ,CAAiB,WAAjB,EAA8B;AAC1BJ,QAAAA,MAAM,EAAEA;AADkB,OAA9B;AAGA,WAAKH,MAAL,CAAYQ,EAAZ,CAAe,oBAAf,EAAqC,UAACC,IAAD,EAAW;AAC5C,QAAA,KAAI,CAACR,YAAL,CAAkBM,IAAlB,CAAuB,oBAAvB,EAA6CE,IAA7C;AACH,OAFD;AAGH;;;gCAEWC,O,EAAS;AACjB,WAAKV,MAAL,CAAYO,IAAZ,CAAiB,aAAjB,EAAgCG,OAAhC;AACH;;;qCAEgB;AAAA;;AACb,WAAKV,MAAL,CAAYQ,EAAZ,CAAe,sBAAf,EAAuC,UAACC,IAAD,EAAU;AAC7C,QAAA,MAAI,CAACR,YAAL,CAAkBM,IAAlB,CAAuB,sBAAvB,EAA+CE,IAA/C;AACH,OAFD;AAGH;;;2BAEMN,M,EAAQ;AAAA;;AACX,WAAKH,MAAL,CAAYO,IAAZ,CAAiB,QAAjB,EAA2BJ,MAA3B;AACA,WAAKH,MAAL,CAAYQ,EAAZ,CAAe,iBAAf,EAAkC,UAACC,IAAD,EAAU;AACxC,QAAA,MAAI,CAACR,YAAL,CAAkBM,IAAlB,CAAuB,iBAAvB,EAA0CE,IAA1C;AACH,OAFD;AAGH,K,CAED;;;;mCACc;AACV,WAAKT,MAAL,CAAYO,IAAZ,CAAiB,cAAjB;AACH,K,CACD;;;;;;;AAIJ,eAAe,IAAIR,gBAAJ,EAAf","sourcesContent":["import * as io from 'socket.io-client';\r\nconst events = require('events');\r\n\r\n\r\nclass ChatSocketServer {\r\n    \r\n    socket = null\r\n    eventEmitter = new events.EventEmitter();\r\n\r\n    // Connecting to Socket Server\r\n    establishSocketConnection(userId) {\r\n        try {\r\n            this.socket = io(`http://localhost:4000`, {\r\n                query: `userId=${userId}`\r\n            });\r\n        } catch (error) {\r\n            alert(`Something went wrong; Can't connect to socket server`);\r\n        }\r\n    }\r\n\r\n    getChatList(userId) {\r\n        this.socket.emit('chat-list', {\r\n            userId: userId\r\n        });\r\n        this.socket.on('chat-list-response', (data)  => {\r\n            this.eventEmitter.emit('chat-list-response', data);\r\n        });\r\n    }\r\n\r\n    sendMessage(message) {\r\n        this.socket.emit('add-message', message);\r\n    }\r\n\r\n    receiveMessage() {\r\n        this.socket.on('add-message-response', (data) => {\r\n            this.eventEmitter.emit('add-message-response', data);\r\n        });\r\n    }\r\n\r\n    logout(userId) {\r\n        this.socket.emit('logout', userId);\r\n        this.socket.on('logout-response', (data) => {\r\n            this.eventEmitter.emit('logout-response', data);\r\n        });\r\n    }\r\n\r\n    //seen\r\n    SeenMesseage(){   \r\n        this.socket.emit('seen-meesage')\r\n    }\r\n    //\r\n\r\n}\r\n\r\nexport default new ChatSocketServer()"]},"metadata":{},"sourceType":"module"}