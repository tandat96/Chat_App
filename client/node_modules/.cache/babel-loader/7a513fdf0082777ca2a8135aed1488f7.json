{"ast":null,"code":"import _toConsumableArray from \"d:\\\\Real-time-private-chatting-app-using-React-Nodejs-mongodb-and-Socket.io\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"d:\\\\Real-time-private-chatting-app-using-React-Nodejs-mongodb-and-Socket.io\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"d:\\\\Real-time-private-chatting-app-using-React-Nodejs-mongodb-and-Socket.io\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"d:\\\\Real-time-private-chatting-app-using-React-Nodejs-mongodb-and-Socket.io\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"d:\\\\Real-time-private-chatting-app-using-React-Nodejs-mongodb-and-Socket.io\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"d:\\\\Real-time-private-chatting-app-using-React-Nodejs-mongodb-and-Socket.io\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"d:\\\\Real-time-private-chatting-app-using-React-Nodejs-mongodb-and-Socket.io\\\\React App\\\\src\\\\pages\\\\home\\\\chat-list\\\\ChatList.js\";\nimport React, { Component } from 'react';\nimport ChatSocketServer from '../../../utils/ChatSocketServer';\nimport \"./ChatList.css\";\n\nvar ChatList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatList, _Component);\n\n  function ChatList(props) {\n    var _this;\n\n    _classCallCheck(this, ChatList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatList).call(this, props));\n\n    _this.createChatListUsers = function (chatListResponse) {\n      if (!chatListResponse.error) {\n        var chatListUsers = _this.state.chatListUsers;\n\n        if (chatListResponse.singleUser) {\n          if (chatListUsers.length > 0) {\n            chatListUsers = chatListUsers.filter(function (obj) {\n              return obj.id !== chatListResponse.chatList[0].id;\n            });\n          }\n          /* Adding new online user into chat list array */\n\n\n          chatListUsers = [].concat(_toConsumableArray(chatListUsers), _toConsumableArray(chatListResponse.chatList));\n        } else if (chatListResponse.userDisconnected) {\n          var loggedOutUser = chatListUsers.findIndex(function (obj) {\n            return obj.id === chatListResponse.userid;\n          });\n\n          if (loggedOutUser >= 0) {\n            chatListUsers[loggedOutUser].online = 'N';\n          }\n        } else {\n          /* Updating entire chat list if user logs in. */\n          chatListUsers = chatListResponse.chatList;\n        }\n\n        _this.setState({\n          chatListUsers: chatListUsers\n        });\n      } else {\n        alert(\"Unable to load Chat list, Redirecting to Login.\");\n      }\n\n      _this.setState({\n        loading: false\n      });\n    };\n\n    _this.selectedUser = function (user) {\n      _this.setState({\n        selectedUserId: user.id\n      });\n\n      _this.props.updateSelectedUser(user);\n    };\n\n    _this.state = {\n      loading: true,\n      selectedUserId: null,\n      chatListUsers: []\n    };\n    return _this;\n  }\n\n  _createClass(ChatList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var userId = this.props.userId;\n      ChatSocketServer.getChatList(userId);\n      ChatSocketServer.eventEmitter.on('chat-list-response', this.createChatListUsers);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ChatSocketServer.eventEmitter.removeListener('chat-list-response', this.createChatListUsers);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, null, React.createElement(\"ul\", {\n        className: \"user-list \".concat(this.state.chatListUsers.length === 0 ? 'visibility-hidden' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, this.state.chatListUsers.map(function (user, index) {\n        return React.createElement(\"li\", {\n          key: index,\n          className: _this2.state.selectedUserId === user.id ? 'active' : '',\n          onClick: function onClick() {\n            return _this2.selectedUser(user);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, user.username, React.createElement(\"span\", {\n          className: user.online === 'Y' ? 'online' : 'offline',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }));\n      })), React.createElement(\"div\", {\n        className: \"alert \\n          \".concat(this.state.loading ? 'alert-info' : '', \" \\n          \").concat(this.state.chatListUsers.length > 0 ? 'visibility-hidden' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, this.state.loading || this.state.chatListUsers.length.length === 0 ? 'Loading your chat list.' : 'No User Available to chat.'));\n    }\n  }]);\n\n  return ChatList;\n}(Component);\n\nexport default ChatList;","map":{"version":3,"sources":["d:\\Real-time-private-chatting-app-using-React-Nodejs-mongodb-and-Socket.io\\React App\\src\\pages\\home\\chat-list\\ChatList.js"],"names":["React","Component","ChatSocketServer","ChatList","props","createChatListUsers","chatListResponse","error","chatListUsers","state","singleUser","length","filter","obj","id","chatList","userDisconnected","loggedOutUser","findIndex","userid","online","setState","alert","loading","selectedUser","user","selectedUserId","updateSelectedUser","userId","getChatList","eventEmitter","on","removeListener","map","index","username"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport ChatSocketServer from '../../../utils/ChatSocketServer';\r\nimport \"./ChatList.css\";\r\n\r\nclass ChatList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      selectedUserId: null,\r\n      chatListUsers: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const userId = this.props.userId;\r\n    ChatSocketServer.getChatList(userId);\r\n    ChatSocketServer.eventEmitter.on('chat-list-response', this.createChatListUsers);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    ChatSocketServer.eventEmitter.removeListener('chat-list-response', this.createChatListUsers);\r\n  }\r\n\r\n  createChatListUsers = (chatListResponse) => {    \r\n    if (!chatListResponse.error) {\r\n      let chatListUsers = this.state.chatListUsers;\r\n      if (chatListResponse.singleUser) {\r\n        if (chatListUsers.length > 0) {\r\n          chatListUsers = chatListUsers.filter(function (obj) {\r\n            return obj.id !== chatListResponse.chatList[0].id;\r\n          });\r\n        }\r\n        /* Adding new online user into chat list array */\r\n        chatListUsers = [...chatListUsers, ...chatListResponse.chatList];\r\n      } else if (chatListResponse.userDisconnected) {\r\n        const loggedOutUser = chatListUsers.findIndex((obj) => obj.id === chatListResponse.userid);\r\n        if (loggedOutUser >= 0) {\r\n          chatListUsers[loggedOutUser].online = 'N';\r\n        }\r\n      } else {\r\n        /* Updating entire chat list if user logs in. */\r\n        chatListUsers = chatListResponse.chatList;\r\n      }\r\n      this.setState({\r\n        chatListUsers: chatListUsers\r\n      });\r\n    } else {\r\n      alert(`Unable to load Chat list, Redirecting to Login.`);\r\n    }\r\n    this.setState({\r\n      loading: false\r\n    });\r\n  }\r\n\r\n  selectedUser = (user) => {\r\n    this.setState({\r\n      selectedUserId: user.id\r\n    });\r\n    this.props.updateSelectedUser(user)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <ul className={`user-list ${this.state.chatListUsers.length === 0 ? 'visibility-hidden' : ''}`} >\r\n          {\r\n            this.state.chatListUsers.map( (user, index) => \r\n              <li \r\n                key={index} \r\n                className={this.state.selectedUserId === user.id ? 'active' : ''}\r\n                onClick={() => this.selectedUser(user)}\r\n              >\r\n                {user.username}\r\n                <span className={user.online === 'Y' ? 'online' : 'offline'}></span>\r\n              </li>\r\n            )\r\n          }\r\n        </ul>\r\n        <div className={`alert \r\n          ${this.state.loading ? 'alert-info' : ''} \r\n          ${this.state.chatListUsers.length > 0 ? 'visibility-hidden' : ''}`\r\n        }>\r\n          { this.state.loading|| this.state.chatListUsers.length.length === 0 ? 'Loading your chat list.' : 'No User Available to chat.'}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatList;\r\n"]},"metadata":{},"sourceType":"module"}