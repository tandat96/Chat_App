{"ast":null,"code":"import _regeneratorRuntime from \"d:\\\\chat\\\\test\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"d:\\\\chat\\\\test\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"d:\\\\chat\\\\test\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"d:\\\\chat\\\\test\\\\React App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport * as axios from 'axios';\n\nvar ChatHttpServer =\n/*#__PURE__*/\nfunction () {\n  function ChatHttpServer() {\n    _classCallCheck(this, ChatHttpServer);\n  }\n\n  _createClass(ChatHttpServer, [{\n    key: \"getUserId\",\n    value: function getUserId() {\n      return new Promise(function (resolve, reject) {\n        try {\n          resolve(localStorage.getItem('userid'));\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n  }, {\n    key: \"removeLS\",\n    value: function removeLS() {\n      return new Promise(function (resolve, reject) {\n        try {\n          localStorage.removeItem('userid');\n          localStorage.removeItem('username');\n          resolve(true);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n  }, {\n    key: \"setLS\",\n    value: function setLS(key, value) {\n      return new Promise(function (resolve, reject) {\n        try {\n          localStorage.setItem(key, value);\n          resolve(true);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n  }, {\n    key: \"login\",\n    value: function login(userCredential) {\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(resolve, reject) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  _context.next = 3;\n                  return axios.post('http://localhost:4000/login', userCredential);\n\n                case 3:\n                  response = _context.sent;\n                  resolve(response.data);\n                  _context.next = 10;\n                  break;\n\n                case 7:\n                  _context.prev = 7;\n                  _context.t0 = _context[\"catch\"](0);\n                  reject(_context.t0);\n\n                case 10:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[0, 7]]);\n        }));\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"checkUsernameAvailability\",\n    value: function checkUsernameAvailability(username) {\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(resolve, reject) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  _context2.next = 3;\n                  return axios.post('http://localhost:4000/usernameAvailable', {\n                    username: username\n                  });\n\n                case 3:\n                  response = _context2.sent;\n                  resolve(response.data);\n                  _context2.next = 10;\n                  break;\n\n                case 7:\n                  _context2.prev = 7;\n                  _context2.t0 = _context2[\"catch\"](0);\n                  reject(_context2.t0);\n\n                case 10:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[0, 7]]);\n        }));\n\n        return function (_x3, _x4) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"register\",\n    value: function register(userCredential) {\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee3(resolve, reject) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.prev = 0;\n                  _context3.next = 3;\n                  return axios.post('http://localhost:4000/register', userCredential);\n\n                case 3:\n                  response = _context3.sent;\n                  resolve(response.data);\n                  _context3.next = 10;\n                  break;\n\n                case 7:\n                  _context3.prev = 7;\n                  _context3.t0 = _context3[\"catch\"](0);\n                  reject(_context3.t0);\n\n                case 10:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, null, [[0, 7]]);\n        }));\n\n        return function (_x5, _x6) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"userSessionCheck\",\n    value: function userSessionCheck(userId) {\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref4 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee4(resolve, reject) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.prev = 0;\n                  _context4.next = 3;\n                  return axios.post('http://localhost:4000/userSessionCheck', {\n                    userId: userId\n                  });\n\n                case 3:\n                  response = _context4.sent;\n                  resolve(response.data);\n                  _context4.next = 10;\n                  break;\n\n                case 7:\n                  _context4.prev = 7;\n                  _context4.t0 = _context4[\"catch\"](0);\n                  reject(_context4.t0);\n\n                case 10:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, null, [[0, 7]]);\n        }));\n\n        return function (_x7, _x8) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"getMessages\",\n    value: function getMessages(userId, toUserId) {\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref5 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee5(resolve, reject) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.prev = 0;\n                  _context5.next = 3;\n                  return axios.post('http://localhost:4000/getMessages', {\n                    userId: userId,\n                    toUserId: toUserId\n                  });\n\n                case 3:\n                  response = _context5.sent;\n                  resolve(response.data);\n                  _context5.next = 10;\n                  break;\n\n                case 7:\n                  _context5.prev = 7;\n                  _context5.t0 = _context5[\"catch\"](0);\n                  reject(_context5.t0);\n\n                case 10:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, null, [[0, 7]]);\n        }));\n\n        return function (_x9, _x10) {\n          return _ref5.apply(this, arguments);\n        };\n      }());\n    }\n  }]);\n\n  return ChatHttpServer;\n}();\n\nexport default new ChatHttpServer();","map":{"version":3,"sources":["d:\\chat\\test\\React App\\src\\utils\\ChatHttpServer.js"],"names":["axios","ChatHttpServer","Promise","resolve","reject","localStorage","getItem","error","removeItem","key","value","setItem","userCredential","post","response","data","username","userId","toUserId"],"mappings":"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","sourcesContent":["import * as axios from 'axios';\r\n \r\nclass ChatHttpServer {\r\n\r\n    getUserId() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                resolve(localStorage.getItem('userid'));\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    removeLS() {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                localStorage.removeItem('userid');\r\n                localStorage.removeItem('username');\r\n                resolve(true);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    setLS(key, value) {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                localStorage.setItem(key, value);\r\n                resolve(true);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    login(userCredential) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const response = await axios.post('http://localhost:4000/login', userCredential);\r\n                resolve(response.data);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    checkUsernameAvailability(username) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const response = await axios.post('http://localhost:4000/usernameAvailable', {\r\n                    username: username\r\n                });\r\n                resolve(response.data);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n    \r\n    register(userCredential) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const response = await axios.post('http://localhost:4000/register', userCredential);\r\n                resolve(response.data);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    userSessionCheck(userId) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const response = await axios.post('http://localhost:4000/userSessionCheck', {\r\n                    userId: userId\r\n                });\r\n                resolve(response.data);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    getMessages(userId, toUserId) {\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n                const response = await axios.post('http://localhost:4000/getMessages', {\r\n                    userId: userId,\r\n                    toUserId: toUserId\r\n                });\r\n                resolve(response.data);\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nexport default new ChatHttpServer();"]},"metadata":{},"sourceType":"module"}