{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\my_project\\\\ChatApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\my_project\\\\ChatApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"D:\\\\my_project\\\\ChatApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:\\\\my_project\\\\ChatApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\my_project\\\\ChatApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\my_project\\\\ChatApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\my_project\\\\ChatApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\my_project\\\\ChatApp\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\my_project\\\\ChatApp\\\\client\\\\src\\\\pages\\\\home\\\\conversation\\\\Conversation.js\";\nimport React, { Component } from 'react';\nimport ChatHttpServer from '../../../utils/ChatHttpServer.js';\nimport ChatSocketServer from '../../../utils/ChatSocketServer.js';\nimport './Conversation.css';\nimport { TIMEOUT } from 'dns';\nimport dots from './dots.js';\n\nvar Conversation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Conversation, _Component);\n\n  function Conversation(props) {\n    var _this;\n\n    _classCallCheck(this, Conversation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Conversation).call(this, props));\n\n    _this.receiveSocketMessages = function (socketResponse) {\n      var selectedUser = _this.state.selectedUser;\n\n      if (selectedUser !== null && selectedUser.id === socketResponse.fromUserId) {\n        _this.setState({\n          conversations: [].concat(_toConsumableArray(_this.state.conversations), [socketResponse])\n        });\n\n        _this.scrollMessageContainer();\n      }\n    };\n\n    _this.getMessages =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$props, userId, newSelectedUser, messageResponse;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _this$props = _this.props, userId = _this$props.userId, newSelectedUser = _this$props.newSelectedUser;\n              _context.next = 4;\n              return ChatHttpServer.getMessages(userId, newSelectedUser.id);\n\n            case 4:\n              messageResponse = _context.sent;\n\n              if (!messageResponse.error) {\n                _this.setState({\n                  conversations: messageResponse.messages\n                }); // this.scrollMessageContainer();\n\n              } else {\n                alert('Unable to fetch messages');\n              }\n\n              _this.setState({\n                messageLoading: false\n              });\n\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n\n              _this.setState({\n                messageLoading: false\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    _this.sendMessage = function (event) {\n      if (event.key === 'Enter') {\n        var message = event.target.value;\n        var _this$props2 = _this.props,\n            userId = _this$props2.userId,\n            newSelectedUser = _this$props2.newSelectedUser;\n\n        if (message === '' || message === undefined || message === null) {\n          alert(\"Message can't be empty.\");\n        } else if (userId === '') {\n          _this.router.navigate(['/']);\n        } else if (newSelectedUser === undefined) {\n          alert(\"Select a user to chat.\");\n        } else {\n          _this.sendAndUpdateMessages({\n            fromUserId: userId,\n            message: message.trim(),\n            seen: false,\n            toUserId: newSelectedUser.id\n          });\n\n          event.target.value = '';\n        }\n      }\n    };\n\n    _this.seen = function () {\n      if (_this.state.conversations === null || _this.state.conversations === '' || _this.state.conversations === undefined || _this.state.conversations.length === 0) {\n        console.log('null data');\n      } else {\n        if (_this.state.conversations[_this.state.conversations.length - 1].fromUserId !== _this.props.userId) {\n          ChatSocketServer.SeenMesseage();\n        }\n\n        _this.getMessages();\n      }\n    };\n\n    _this.typing = function () {\n      ChatSocketServer.Typing();\n    };\n\n    _this.state = {\n      messageLoading: true,\n      conversations: [],\n      selectedUser: null\n    };\n    _this.messageContainer = React.createRef();\n    return _this;\n  }\n\n  _createClass(Conversation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ChatSocketServer.receiveMessage();\n      ChatSocketServer.eventEmitter.on('add-message-response', this.receiveSocketMessages);\n      ChatSocketServer.eventEmitter.on('who-typing', this.whoTyping);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      ChatSocketServer.eventEmitter.removeListener('add-message-response', this.receiveSocketMessages);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      // after update seen funtions\n      if (this.state.conversations !== prevState.conversations) {\n        this.getMessages(); // this.scrollMessageContainer();\n      }\n\n      if (prevProps.newSelectedUser === null || this.props.newSelectedUser.id !== prevProps.newSelectedUser.id) {\n        this.getMessages();\n        this.scrollMessageContainer();\n      }\n    }\n  }, {\n    key: \"sendAndUpdateMessages\",\n    value: function sendAndUpdateMessages(message) {\n      try {\n        ChatSocketServer.sendMessage(message);\n        this.setState({\n          conversations: [].concat(_toConsumableArray(this.state.conversations), [message])\n        });\n        this.scrollMessageContainer();\n      } catch (error) {\n        alert(\"Can't send your message\");\n      }\n    }\n  }, {\n    key: \"scrollMessageContainer\",\n    value: function scrollMessageContainer() {\n      var _this2 = this;\n\n      if (this.messageContainer.current !== null) {\n        try {\n          setTimeout(function () {\n            _this2.messageContainer.current.scrollTop = _this2.messageContainer.current.scrollHeight;\n          }, 100);\n        } catch (error) {\n          console.warn(error);\n        }\n      }\n    }\n  }, {\n    key: \"alignMessages\",\n    value: function alignMessages(toUserId) {\n      var userId = this.props.userId;\n      return userId !== toUserId;\n    } // *********************************\n\n  }, {\n    key: \"getMessageUI\",\n    value: function getMessageUI() {\n      var _this3 = this;\n\n      this.scrollMessageContainer();\n      return React.createElement(\"ul\", {\n        ref: this.messageContainer,\n        className: \"message-thread\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, this.state.conversations.map(function (conversation, index) {\n        return React.createElement(\"li\", {\n          className: \"\".concat(_this3.alignMessages(conversation.toUserId) ? 'align-right' : 'align-left'),\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"mssbox\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, conversation.message), React.createElement(\"div\", {\n          className: _this3.state.conversations.indexOf(conversation) === _this3.state.conversations.length - 1 ? 'last' : 'not-last',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: conversation.seen && _this3.props.userId === conversation.fromUserId ? 'seen' : 'unread',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, \"seen\"), React.createElement(\"div\", {\n          id: \"wave\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, _this3.dots)));\n      }));\n    }\n  }, {\n    key: \"getInitiateConversationUI\",\n    value: function getInitiateConversationUI() {\n      if (this.props.newSelectedUser !== null) {\n        return React.createElement(\"div\", {\n          className: \"message-thread start-chatting-banner\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"heading\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, \"You haven 't chatted with \", this.props.newSelectedUser.username, \" in a while,\", React.createElement(\"span\", {\n          className: \"sub-heading\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, \" Say Hi.\")));\n      }\n    } //seen\n\n  }, {\n    key: \"whoTyping\",\n    value: function whoTyping() {\n      console.log('aaaaaaaaaa');\n      document.getElementById('#wave').append(React.createElement(\"dots\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          messageLoading = _this$state.messageLoading,\n          selectedUser = _this$state.selectedUser;\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"message-overlay \".concat(!messageLoading ? 'visibility-hidden' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \" \", selectedUser !== null && selectedUser.username ? 'Loading Messages' : ' Select a User to chat.')), React.createElement(\"div\", {\n        className: \"message-wrapper \".concat(messageLoading ? 'visibility-hidden' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"message-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"opposite-user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Chatting with \", this.props.newSelectedUser !== null ? this.props.newSelectedUser.username : '----'), this.state.conversations.length > 0 ? this.getMessageUI() : this.getInitiateConversationUI()), React.createElement(\"div\", {\n        className: \"message-typer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        id: \"typing\",\n        className: \"message form-control\",\n        placeholder: \"Type and hit Enter\",\n        onKeyPress: this.sendMessage,\n        onClick: this.seen,\n        onFocus: this.typing,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      })))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (state.selectedUser === null || state.selectedUser.id !== props.newSelectedUser.id) {\n        return {\n          selectedUser: props.newSelectedUser\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Conversation;\n}(Component);\n\nexport default Conversation;","map":{"version":3,"sources":["D:\\my_project\\ChatApp\\client\\src\\pages\\home\\conversation\\Conversation.js"],"names":["React","Component","ChatHttpServer","ChatSocketServer","TIMEOUT","dots","Conversation","props","receiveSocketMessages","socketResponse","selectedUser","state","id","fromUserId","setState","conversations","scrollMessageContainer","getMessages","userId","newSelectedUser","messageResponse","error","messages","alert","messageLoading","sendMessage","event","key","message","target","value","undefined","router","navigate","sendAndUpdateMessages","trim","seen","toUserId","length","console","log","SeenMesseage","typing","Typing","messageContainer","createRef","receiveMessage","eventEmitter","on","whoTyping","removeListener","prevProps","prevState","current","setTimeout","scrollTop","scrollHeight","warn","map","conversation","index","alignMessages","indexOf","username","document","getElementById","append","getMessageUI","getInitiateConversationUI"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport ChatHttpServer from '../../../utils/ChatHttpServer.js';\r\nimport ChatSocketServer from '../../../utils/ChatSocketServer.js';\r\n\r\nimport './Conversation.css';\r\nimport { TIMEOUT } from 'dns';\r\nimport dots from './dots.js';\r\n\r\nclass Conversation extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      messageLoading: true,\r\n      conversations: [],\r\n      selectedUser: null\r\n    }\r\n    this.messageContainer = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    ChatSocketServer.receiveMessage();\r\n    ChatSocketServer.eventEmitter.on('add-message-response', this.receiveSocketMessages);\r\n    ChatSocketServer.eventEmitter.on('who-typing', this.whoTyping);\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    ChatSocketServer.eventEmitter.removeListener('add-message-response', this.receiveSocketMessages);\r\n  }\r\n  \r\n  componentDidUpdate(prevProps,prevState) {\r\n    // after update seen funtions\r\n    if(this.state.conversations !== prevState.conversations){\r\n      this.getMessages();\r\n      // this.scrollMessageContainer();\r\n\r\n    }\r\n    if (prevProps.newSelectedUser === null || (this.props.newSelectedUser.id !== prevProps.newSelectedUser.id)) {\r\n      this.getMessages();\r\n      this.scrollMessageContainer();\r\n\r\n    }\r\n  }\r\n\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (state.selectedUser === null || state.selectedUser.id !== props.newSelectedUser.id) {\r\n      return {\r\n        selectedUser: props.newSelectedUser\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  receiveSocketMessages = (socketResponse) => {\r\n    const { selectedUser } = this.state;\r\n    if (selectedUser !== null && selectedUser.id === socketResponse.fromUserId) {\r\n      this.setState({\r\n        conversations: [...this.state.conversations, socketResponse]\r\n      });\r\n      this.scrollMessageContainer();\r\n    }\r\n  }\r\n\r\n  getMessages = async () => {\r\n    try {\r\n      const { userId, newSelectedUser } = this.props;\r\n      const messageResponse = await ChatHttpServer.getMessages(userId, newSelectedUser.id);\r\n      if (!messageResponse.error) {\r\n        this.setState({\r\n          conversations: messageResponse.messages,\r\n        });\r\n        // this.scrollMessageContainer();\r\n      } else {\r\n        alert('Unable to fetch messages');\r\n      }\r\n      this.setState({\r\n        messageLoading: false\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        messageLoading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  sendMessage = (event) => {\r\n    if (event.key === 'Enter') {\r\n      const message = event.target.value;\r\n      const { userId, newSelectedUser } = this.props;\r\n      if (message === '' || message === undefined || message === null) {\r\n        alert(`Message can't be empty.`);\r\n      } else if (userId === '') {\r\n        this.router.navigate(['/']);\r\n      } else if (newSelectedUser === undefined) {\r\n        alert(`Select a user to chat.`);\r\n      } else {\r\n        this.sendAndUpdateMessages({\r\n          fromUserId: userId,\r\n          message: (message).trim(),\r\n          seen: false,\r\n          toUserId: newSelectedUser.id,\r\n        });\r\n        event.target.value = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  sendAndUpdateMessages(message) {\r\n    try {\r\n      ChatSocketServer.sendMessage(message);\r\n      this.setState({\r\n        conversations: [...this.state.conversations, message]\r\n      });\r\n      this.scrollMessageContainer();\r\n    } catch (error) {\r\n      alert(`Can't send your message`);\r\n    }\r\n  }\r\n\r\n  scrollMessageContainer() {\r\n    if (this.messageContainer.current !== null) {\r\n      try {\r\n        setTimeout(() => {\r\n          this.messageContainer.current.scrollTop = this.messageContainer.current.scrollHeight;\r\n        }, 100);\r\n      } catch (error) {\r\n        console.warn(error);\r\n      }\r\n    }\r\n  }\r\n  alignMessages(toUserId) {\r\n    const { userId } = this.props;\r\n    return userId !== toUserId;\r\n  }\r\n  // *********************************\r\n  getMessageUI() {\r\n    this.scrollMessageContainer();\r\n\r\n    return (\r\n      <ul ref={this.messageContainer} className=\"message-thread\">\r\n        {\r\n          this.state.conversations.map((conversation, index) =>\r\n            <li className={`${this.alignMessages(conversation.toUserId) ? 'align-right' : 'align-left'}`} key={index}>\r\n              <div className='mssbox'>\r\n                {conversation.message}\r\n              </div>\r\n              <div className={this.state.conversations.indexOf(conversation) === (this.state.conversations.length - 1) ? 'last' : 'not-last'}>\r\n                <div className={(conversation.seen && this.props.userId===conversation.fromUserId) ? 'seen' : 'unread'}>seen</div>\r\n                <div id=\"wave\">\r\n              {this.dots}\r\n          </div>\r\n              </div>\r\n              \r\n            </li>\r\n          )\r\n        }\r\n      </ul>\r\n    )\r\n    \r\n  }\r\n\r\n  getInitiateConversationUI() {\r\n    if (this.props.newSelectedUser !== null) {\r\n      return (\r\n        <div className=\"message-thread start-chatting-banner\">\r\n          <p className=\"heading\">\r\n            You haven 't chatted with {this.props.newSelectedUser.username} in a while,\r\n            <span className=\"sub-heading\"> Say Hi.</span>\r\n          </p>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  //seen\r\n  seen = () => {\r\n    if (this.state.conversations === null || this.state.conversations === '' || this.state.conversations === undefined || this.state.conversations.length === 0) {\r\n      console.log('null data')\r\n    } else {\r\n      if (this.state.conversations[this.state.conversations.length - 1].fromUserId !== this.props.userId) {\r\n        ChatSocketServer.SeenMesseage()\r\n      }\r\n      this.getMessages();\r\n    }\r\n  }\r\n  typing = ()=>{\r\n    ChatSocketServer.Typing()\r\n  }\r\n  whoTyping(){\r\n    console.log('aaaaaaaaaa');\r\n    document.getElementById('#wave').append(\r\n      <dots/>\r\n    )\r\n  }\r\n  \r\n\r\n  render() {\r\n    const { messageLoading, selectedUser } = this.state;\r\n    return (\r\n      <>\r\n        <div className={`message-overlay ${!messageLoading ? 'visibility-hidden' : ''}`}>\r\n          <h3> {selectedUser !== null && selectedUser.username ? 'Loading Messages' : ' Select a User to chat.'}</h3>\r\n        </div>\r\n        <div className={`message-wrapper ${messageLoading ? 'visibility-hidden' : ''}`}>\r\n          <div className=\"message-container\">\r\n            <div className=\"opposite-user\">\r\n              Chatting with {this.props.newSelectedUser !== null ? this.props.newSelectedUser.username : '----'}\r\n            </div>\r\n            {this.state.conversations.length > 0 ? this.getMessageUI() : this.getInitiateConversationUI()}\r\n            \r\n          </div>\r\n\r\n          <div className=\"message-typer\">\r\n            <form>\r\n              <textarea id=\"typing\" className=\"message form-control\" placeholder=\"Type and hit Enter\" onKeyPress={this.sendMessage} onClick={this.seen} onFocus={this.typing}>\r\n              </textarea>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Conversation;\r\n"]},"metadata":{},"sourceType":"module"}